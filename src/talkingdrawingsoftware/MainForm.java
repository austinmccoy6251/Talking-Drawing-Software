/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package talkingdrawingsoftware;

import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Austin McCoy
 * This is the GUI form for the software
 */
public class MainForm extends javax.swing.JFrame {

    //Flags for whether or not each word/response list is loaded
    private boolean scienceWordListLoaded = false;
    private boolean academicWordListLoaded = false;
    private boolean commonWordListLoaded = false;
    private boolean questionWordListLoaded = false;
    private boolean blackWordListLoaded = false;
    private boolean preTDRLoaded = false;
    private boolean postTDRLoaded = false;

    //File paths for output file and all word/response lists
    private String lastFolder = "";
    private String scienceWordListFilePath = "";
    private String academicWordListFilePath = "";
    private String commonWordListFilePath = "";
    private String blackWordListFilePath = "";
    private String questionWordListFilePath = "";
    private String preTDRFilePath = "";
    private String postTDRFilePath = "";
    private String outputFolderPath = "C:\\Users\\austi\\Documents";

    //Word/response lists
    ArrayList<String> scienceWordList = new ArrayList<String>();
    ArrayList<String> questionWordList = new ArrayList<String>();
    ArrayList<String> blackWordList = new ArrayList<String>();
    ArrayList<String> academicWordList = new ArrayList<String>();
    ArrayList<String> commonWordList = new ArrayList<String>();
    ArrayList<String> preTDResponses = new ArrayList<String>();
    ArrayList<String> postTDResponses = new ArrayList<String>();

    //Result lists
    ArrayList<TDResult> preTDResults = new ArrayList<TDResult>();
    ArrayList<TDResult> postTDResults = new ArrayList<TDResult>();

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator3 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        main_panel = new javax.swing.JPanel();
        label_academicWordList = new javax.swing.JLabel();
        label_title1 = new javax.swing.JLabel();
        combobox_inputType_academicWordList = new javax.swing.JComboBox<>();
        label_inputType_academicWordList = new javax.swing.JLabel();
        button_chooseFile_academicWordList = new javax.swing.JButton();
        label_customDelimiter_academicWordList = new javax.swing.JLabel();
        label_console = new javax.swing.JLabel();
        label_inputType_PreTDList = new javax.swing.JLabel();
        combobox_inputType_PreTDList = new javax.swing.JComboBox<>();
        label_inputType_PreTDResponses = new javax.swing.JLabel();
        button_chooseFile_PreTDList = new javax.swing.JButton();
        label_customDelimiter_PreTDResponse = new javax.swing.JLabel();
        button_reset = new javax.swing.JButton();
        button_analyze = new javax.swing.JButton();
        label_fileName_PreTDList = new javax.swing.JLabel();
        label_fileName_academicWordList = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        button_previewWordList = new javax.swing.JButton();
        button_previewTDResponses = new javax.swing.JButton();
        combobox_customDelimiter_academicWordList = new javax.swing.JComboBox<>();
        combobox_customDelimiter_PreTDList = new javax.swing.JComboBox<>();
        button_chooseOutputFolder = new javax.swing.JButton();
        label_outputFileName = new javax.swing.JLabel();
        textbox_outputFile = new javax.swing.JTextField();
        jSeparator8 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();
        jSeparator10 = new javax.swing.JSeparator();
        label_customDelimiter_commonWordList = new javax.swing.JLabel();
        label_fileName_commonWordList = new javax.swing.JLabel();
        combobox_inputType_commonWordList = new javax.swing.JComboBox<>();
        button_chooseFile_commonWordList = new javax.swing.JButton();
        combobox_customDelimiter_commonWordList = new javax.swing.JComboBox<>();
        jSeparator11 = new javax.swing.JSeparator();
        label_commonWordList = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();
        label_inputType_commonWordList = new javax.swing.JLabel();
        label_customDelimiter_blackWordList = new javax.swing.JLabel();
        label_fileName_blackWordList = new javax.swing.JLabel();
        combobox_inputType_blackWordList = new javax.swing.JComboBox<>();
        button_chooseFile_blackWordList = new javax.swing.JButton();
        combobox_customDelimiter_blackWordList = new javax.swing.JComboBox<>();
        jSeparator13 = new javax.swing.JSeparator();
        label_blackWordList = new javax.swing.JLabel();
        jSeparator14 = new javax.swing.JSeparator();
        label_inputType_blackWordList = new javax.swing.JLabel();
        combobox_customDelimiter_questionWordList = new javax.swing.JComboBox<>();
        label_customDelimiter_questionWordList = new javax.swing.JLabel();
        combobox_inputType_questionWordList = new javax.swing.JComboBox<>();
        button_chooseFile_questionWordList = new javax.swing.JButton();
        label_fileName_questionWordList = new javax.swing.JLabel();
        label_wordList_questionWordList = new javax.swing.JLabel();
        label_inputType_questionWordList = new javax.swing.JLabel();
        jSeparator15 = new javax.swing.JSeparator();
        jSeparator16 = new javax.swing.JSeparator();
        combobox_customDelimiter_scienceWordList = new javax.swing.JComboBox<>();
        label_customDelimiter_scienceWordList = new javax.swing.JLabel();
        combobox_inputType_scienceWordList = new javax.swing.JComboBox<>();
        label_fileName_scienceWordList = new javax.swing.JLabel();
        button_chooseFile_scienceWordList = new javax.swing.JButton();
        label_inputType_scienceWordList = new javax.swing.JLabel();
        label_scienceWordList = new javax.swing.JLabel();
        jSeparator17 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        textarea_console = new javax.swing.JTextArea();
        checkbox_commonWordFilter = new javax.swing.JCheckBox();
        checkbox_blackListFilter = new javax.swing.JCheckBox();
        checkbox_questionListFilter = new javax.swing.JCheckBox();
        jSeparator18 = new javax.swing.JSeparator();
        combobox_customDelimiter_PostTDList = new javax.swing.JComboBox<>();
        label_customDelimiter_PostTDResponse = new javax.swing.JLabel();
        label_fileName_PostTDList = new javax.swing.JLabel();
        button_chooseFile_PostTDList = new javax.swing.JButton();
        combobox_inputType_PostTDList = new javax.swing.JComboBox<>();
        label_inputType_PostTDList = new javax.swing.JLabel();
        label_inputType_PostTDResponses = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Talking Drawing Software");
        setBackground(new java.awt.Color(78, 91, 121));
        setMaximumSize(new java.awt.Dimension(650, 960));
        setMinimumSize(new java.awt.Dimension(650, 960));
        setPreferredSize(new java.awt.Dimension(650, 960));
        setResizable(false);
        setSize(new java.awt.Dimension(650, 960));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        main_panel.setBackground(new java.awt.Color(78, 91, 121));
        main_panel.setMaximumSize(new java.awt.Dimension(650, 930));
        main_panel.setMinimumSize(new java.awt.Dimension(650, 930));
        main_panel.setName(""); // NOI18N
        main_panel.setPreferredSize(new java.awt.Dimension(650, 930));
        main_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label_academicWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_academicWordList.setForeground(java.awt.Color.white);
        label_academicWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_academicWordList.setText("Academic Word List");
        main_panel.add(label_academicWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        label_title1.setFont(new java.awt.Font("Open Sans Light", 0, 24)); // NOI18N
        label_title1.setForeground(java.awt.Color.white);
        label_title1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_title1.setText("Talking Drawing Software");
        main_panel.add(label_title1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 15, -1, -1));

        combobox_inputType_academicWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_inputType_academicWordList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Comma Seperated", "Line Seperated", "Custom" }));
        combobox_inputType_academicWordList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_inputType_academicWordList.setBorder(null);
        combobox_inputType_academicWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_inputType_academicWordListActionPerformed(evt);
            }
        });
        main_panel.add(combobox_inputType_academicWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 168, -1));
        combobox_inputType_academicWordList.getAccessibleContext().setAccessibleDescription("");

        label_inputType_academicWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_inputType_academicWordList.setForeground(java.awt.Color.white);
        label_inputType_academicWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_inputType_academicWordList.setText("Input Type");
        main_panel.add(label_inputType_academicWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        button_chooseFile_academicWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_chooseFile_academicWordList.setText("Choose File");
        button_chooseFile_academicWordList.setToolTipText("Select the text file containing the responses to analyze.");
        button_chooseFile_academicWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_chooseFile_academicWordListActionPerformed(evt);
            }
        });
        main_panel.add(button_chooseFile_academicWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 130, -1));

        label_customDelimiter_academicWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_customDelimiter_academicWordList.setForeground(java.awt.Color.white);
        label_customDelimiter_academicWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_customDelimiter_academicWordList.setText("Custom Delimiter");
        main_panel.add(label_customDelimiter_academicWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, -1, -1));

        label_console.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_console.setForeground(java.awt.Color.white);
        label_console.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_console.setText("Console");
        main_panel.add(label_console, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 820, -1, -1));

        label_inputType_PreTDList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_inputType_PreTDList.setForeground(java.awt.Color.white);
        label_inputType_PreTDList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_inputType_PreTDList.setText("Pre-Talking Drawings");
        main_panel.add(label_inputType_PreTDList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, -1, -1));

        combobox_inputType_PreTDList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_inputType_PreTDList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Comma Seperated", "Line Seperated", "Custom" }));
        combobox_inputType_PreTDList.setSelectedIndex(1);
        combobox_inputType_PreTDList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_inputType_PreTDList.setBorder(null);
        combobox_inputType_PreTDList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_inputType_PreTDListActionPerformed(evt);
            }
        });
        main_panel.add(combobox_inputType_PreTDList, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 560, 168, -1));

        label_inputType_PreTDResponses.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_inputType_PreTDResponses.setForeground(java.awt.Color.white);
        label_inputType_PreTDResponses.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_inputType_PreTDResponses.setText("Input Type");
        main_panel.add(label_inputType_PreTDResponses, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 560, -1, -1));

        button_chooseFile_PreTDList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_chooseFile_PreTDList.setText("Choose File");
        button_chooseFile_PreTDList.setToolTipText("Select the text file containing the responses to analyze.");
        button_chooseFile_PreTDList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_chooseFile_PreTDListActionPerformed(evt);
            }
        });
        main_panel.add(button_chooseFile_PreTDList, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 520, 130, -1));

        label_customDelimiter_PreTDResponse.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_customDelimiter_PreTDResponse.setForeground(java.awt.Color.white);
        label_customDelimiter_PreTDResponse.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_customDelimiter_PreTDResponse.setText("Custom Delimiter");
        main_panel.add(label_customDelimiter_PreTDResponse, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 560, -1, -1));

        button_reset.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_reset.setText("Clear Files");
        button_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_resetActionPerformed(evt);
            }
        });
        main_panel.add(button_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 730, 130, -1));

        button_analyze.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_analyze.setText("Analyze");
        button_analyze.setEnabled(false);
        button_analyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_analyzeActionPerformed(evt);
            }
        });
        main_panel.add(button_analyze, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 730, 90, -1));

        label_fileName_PreTDList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        label_fileName_PreTDList.setForeground(java.awt.Color.white);
        label_fileName_PreTDList.setText("File: Not Chosen");
        main_panel.add(label_fileName_PreTDList, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 525, -1, -1));

        label_fileName_academicWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        label_fileName_academicWordList.setForeground(java.awt.Color.white);
        label_fileName_academicWordList.setText("File: Not Chosen");
        main_panel.add(label_fileName_academicWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 75, -1, -1));
        main_panel.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 600, 1000, 2));
        main_panel.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 510, 1000, 2));
        main_panel.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 1000, 2));

        button_previewWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_previewWordList.setText("Preview Word Lists");
        button_previewWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_previewWordListActionPerformed(evt);
            }
        });
        main_panel.add(button_previewWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 730, 150, -1));

        button_previewTDResponses.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_previewTDResponses.setText("Preview TD Responses");
        button_previewTDResponses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_previewTDResponsesActionPerformed(evt);
            }
        });
        main_panel.add(button_previewTDResponses, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 730, 160, -1));

        combobox_customDelimiter_academicWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_customDelimiter_academicWordList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "~", "`", "!", "@", "#", "$", "%", "&", "*", "(", ")", "-", "+", "<", ">", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "=", "_" }));
        combobox_customDelimiter_academicWordList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_customDelimiter_academicWordList.setBorder(null);
        combobox_customDelimiter_academicWordList.setEnabled(false);
        main_panel.add(combobox_customDelimiter_academicWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 110, 168, -1));

        combobox_customDelimiter_PreTDList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_customDelimiter_PreTDList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "~", "`", "!", "@", "#", "$", "%", "&", "*", "(", ")", "-", "+", "<", ">", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "=", "_" }));
        combobox_customDelimiter_PreTDList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_customDelimiter_PreTDList.setBorder(null);
        combobox_customDelimiter_PreTDList.setEnabled(false);
        main_panel.add(combobox_customDelimiter_PreTDList, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 560, 168, -1));

        button_chooseOutputFolder.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_chooseOutputFolder.setText("Choose Output Folder");
        button_chooseOutputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_chooseOutputFolderActionPerformed(evt);
            }
        });
        main_panel.add(button_chooseOutputFolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 690, 170, -1));

        label_outputFileName.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_outputFileName.setForeground(java.awt.Color.white);
        label_outputFileName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_outputFileName.setText("Output File Name:");
        main_panel.add(label_outputFileName, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 690, -1, -1));

        textbox_outputFile.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        textbox_outputFile.setText("fileName");
        textbox_outputFile.setEnabled(false);
        main_panel.add(textbox_outputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 690, 210, -1));
        main_panel.add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 770, 1000, 2));
        main_panel.add(jSeparator9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 600, 1000, 2));
        main_panel.add(jSeparator10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 640, 0));

        label_customDelimiter_commonWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_customDelimiter_commonWordList.setForeground(java.awt.Color.white);
        label_customDelimiter_commonWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_customDelimiter_commonWordList.setText("Custom Delimiter");
        main_panel.add(label_customDelimiter_commonWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 290, -1, -1));

        label_fileName_commonWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        label_fileName_commonWordList.setForeground(java.awt.Color.white);
        label_fileName_commonWordList.setText("File: Not Chosen");
        main_panel.add(label_fileName_commonWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 255, -1, -1));

        combobox_inputType_commonWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_inputType_commonWordList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Comma Seperated", "Line Seperated", "Custom" }));
        combobox_inputType_commonWordList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_inputType_commonWordList.setBorder(null);
        combobox_inputType_commonWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_inputType_commonWordListActionPerformed(evt);
            }
        });
        main_panel.add(combobox_inputType_commonWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, 168, -1));

        button_chooseFile_commonWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_chooseFile_commonWordList.setText("Choose File");
        button_chooseFile_commonWordList.setToolTipText("Select the text file containing the responses to analyze.");
        button_chooseFile_commonWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_chooseFile_commonWordListActionPerformed(evt);
            }
        });
        main_panel.add(button_chooseFile_commonWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 250, 130, -1));

        combobox_customDelimiter_commonWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_customDelimiter_commonWordList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "~", "`", "!", "@", "#", "$", "%", "&", "*", "(", ")", "-", "+", "<", ">", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "=", "_" }));
        combobox_customDelimiter_commonWordList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_customDelimiter_commonWordList.setBorder(null);
        combobox_customDelimiter_commonWordList.setEnabled(false);
        main_panel.add(combobox_customDelimiter_commonWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 290, 168, -1));
        main_panel.add(jSeparator11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, 1000, 2));

        label_commonWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_commonWordList.setForeground(java.awt.Color.white);
        label_commonWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_commonWordList.setText("Common Word List");
        main_panel.add(label_commonWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));
        main_panel.add(jSeparator12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 1000, 2));

        label_inputType_commonWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_inputType_commonWordList.setForeground(java.awt.Color.white);
        label_inputType_commonWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_inputType_commonWordList.setText("Input Type");
        main_panel.add(label_inputType_commonWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, -1, -1));

        label_customDelimiter_blackWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_customDelimiter_blackWordList.setForeground(java.awt.Color.white);
        label_customDelimiter_blackWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_customDelimiter_blackWordList.setText("Custom Delimiter");
        main_panel.add(label_customDelimiter_blackWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 380, -1, -1));

        label_fileName_blackWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        label_fileName_blackWordList.setForeground(java.awt.Color.white);
        label_fileName_blackWordList.setText("File: Not Chosen");
        main_panel.add(label_fileName_blackWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 345, -1, -1));

        combobox_inputType_blackWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_inputType_blackWordList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Comma Seperated", "Line Seperated", "Custom" }));
        combobox_inputType_blackWordList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_inputType_blackWordList.setBorder(null);
        combobox_inputType_blackWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_inputType_blackWordListActionPerformed(evt);
            }
        });
        main_panel.add(combobox_inputType_blackWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 380, 168, -1));

        button_chooseFile_blackWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_chooseFile_blackWordList.setText("Choose File");
        button_chooseFile_blackWordList.setToolTipText("Select the text file containing the responses to analyze.");
        button_chooseFile_blackWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_chooseFile_blackWordListActionPerformed(evt);
            }
        });
        main_panel.add(button_chooseFile_blackWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 340, 130, -1));

        combobox_customDelimiter_blackWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_customDelimiter_blackWordList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "~", "`", "!", "@", "#", "$", "%", "&", "*", "(", ")", "-", "+", "<", ">", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "=", "_" }));
        combobox_customDelimiter_blackWordList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_customDelimiter_blackWordList.setBorder(null);
        combobox_customDelimiter_blackWordList.setEnabled(false);
        main_panel.add(combobox_customDelimiter_blackWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 380, 168, -1));
        main_panel.add(jSeparator13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 420, 1000, 2));

        label_blackWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_blackWordList.setForeground(java.awt.Color.white);
        label_blackWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_blackWordList.setText("Black List");
        main_panel.add(label_blackWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, -1, -1));
        main_panel.add(jSeparator14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, 1000, 2));

        label_inputType_blackWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_inputType_blackWordList.setForeground(java.awt.Color.white);
        label_inputType_blackWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_inputType_blackWordList.setText("Input Type");
        main_panel.add(label_inputType_blackWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, -1, -1));

        combobox_customDelimiter_questionWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_customDelimiter_questionWordList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "~", "`", "!", "@", "#", "$", "%", "&", "*", "(", ")", "-", "+", "<", ">", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "=", "_" }));
        combobox_customDelimiter_questionWordList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_customDelimiter_questionWordList.setBorder(null);
        combobox_customDelimiter_questionWordList.setEnabled(false);
        main_panel.add(combobox_customDelimiter_questionWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 470, 168, -1));

        label_customDelimiter_questionWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_customDelimiter_questionWordList.setForeground(java.awt.Color.white);
        label_customDelimiter_questionWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_customDelimiter_questionWordList.setText("Custom Delimiter");
        main_panel.add(label_customDelimiter_questionWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 470, -1, -1));

        combobox_inputType_questionWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_inputType_questionWordList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Comma Seperated", "Line Seperated", "Custom" }));
        combobox_inputType_questionWordList.setSelectedIndex(1);
        combobox_inputType_questionWordList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_inputType_questionWordList.setBorder(null);
        combobox_inputType_questionWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_inputType_questionWordListActionPerformed(evt);
            }
        });
        main_panel.add(combobox_inputType_questionWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 470, 168, -1));

        button_chooseFile_questionWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_chooseFile_questionWordList.setText("Choose File");
        button_chooseFile_questionWordList.setToolTipText("Select the text file containing the responses to analyze.");
        button_chooseFile_questionWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_chooseFile_questionWordListActionPerformed(evt);
            }
        });
        main_panel.add(button_chooseFile_questionWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 430, 130, -1));

        label_fileName_questionWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        label_fileName_questionWordList.setForeground(java.awt.Color.white);
        label_fileName_questionWordList.setText("File: Not Chosen");
        main_panel.add(label_fileName_questionWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 435, -1, -1));

        label_wordList_questionWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_wordList_questionWordList.setForeground(java.awt.Color.white);
        label_wordList_questionWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_wordList_questionWordList.setText("Question List");
        main_panel.add(label_wordList_questionWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 430, -1, -1));

        label_inputType_questionWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_inputType_questionWordList.setForeground(java.awt.Color.white);
        label_inputType_questionWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_inputType_questionWordList.setText("Input Type");
        main_panel.add(label_inputType_questionWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, -1, -1));
        main_panel.add(jSeparator15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 680, 1000, 2));
        main_panel.add(jSeparator16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 1000, 2));

        combobox_customDelimiter_scienceWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_customDelimiter_scienceWordList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "~", "`", "!", "@", "#", "$", "%", "&", "*", "(", ")", "-", "+", "<", ">", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "=", "_" }));
        combobox_customDelimiter_scienceWordList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_customDelimiter_scienceWordList.setBorder(null);
        combobox_customDelimiter_scienceWordList.setEnabled(false);
        main_panel.add(combobox_customDelimiter_scienceWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 200, 168, -1));

        label_customDelimiter_scienceWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_customDelimiter_scienceWordList.setForeground(java.awt.Color.white);
        label_customDelimiter_scienceWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_customDelimiter_scienceWordList.setText("Custom Delimiter");
        main_panel.add(label_customDelimiter_scienceWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 200, -1, -1));

        combobox_inputType_scienceWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_inputType_scienceWordList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Comma Seperated", "Line Seperated", "Custom" }));
        combobox_inputType_scienceWordList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_inputType_scienceWordList.setBorder(null);
        combobox_inputType_scienceWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_inputType_scienceWordListActionPerformed(evt);
            }
        });
        main_panel.add(combobox_inputType_scienceWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, 168, -1));

        label_fileName_scienceWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        label_fileName_scienceWordList.setForeground(java.awt.Color.white);
        label_fileName_scienceWordList.setText("File: Not Chosen");
        main_panel.add(label_fileName_scienceWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 165, -1, -1));

        button_chooseFile_scienceWordList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_chooseFile_scienceWordList.setText("Choose File");
        button_chooseFile_scienceWordList.setToolTipText("Select the text file containing the responses to analyze.");
        button_chooseFile_scienceWordList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_chooseFile_scienceWordListActionPerformed(evt);
            }
        });
        main_panel.add(button_chooseFile_scienceWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, 130, -1));

        label_inputType_scienceWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_inputType_scienceWordList.setForeground(java.awt.Color.white);
        label_inputType_scienceWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_inputType_scienceWordList.setText("Input Type");
        main_panel.add(label_inputType_scienceWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));

        label_scienceWordList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_scienceWordList.setForeground(java.awt.Color.white);
        label_scienceWordList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_scienceWordList.setText("Science Word List");
        main_panel.add(label_scienceWordList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));
        main_panel.add(jSeparator17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 90, -1));

        textarea_console.setColumns(20);
        textarea_console.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        textarea_console.setRows(5);
        jScrollPane2.setViewportView(textarea_console);

        main_panel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 850, 620, 70));

        checkbox_commonWordFilter.setBackground(new java.awt.Color(78, 91, 121));
        checkbox_commonWordFilter.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        checkbox_commonWordFilter.setForeground(java.awt.Color.white);
        checkbox_commonWordFilter.setSelected(true);
        checkbox_commonWordFilter.setText("Filter Common Words");
        main_panel.add(checkbox_commonWordFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 780, -1, -1));

        checkbox_blackListFilter.setBackground(new java.awt.Color(78, 91, 121));
        checkbox_blackListFilter.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        checkbox_blackListFilter.setForeground(java.awt.Color.white);
        checkbox_blackListFilter.setSelected(true);
        checkbox_blackListFilter.setText("Filter Black List");
        main_panel.add(checkbox_blackListFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 780, -1, -1));

        checkbox_questionListFilter.setBackground(new java.awt.Color(78, 91, 121));
        checkbox_questionListFilter.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        checkbox_questionListFilter.setForeground(java.awt.Color.white);
        checkbox_questionListFilter.setSelected(true);
        checkbox_questionListFilter.setText("Filter Question List");
        main_panel.add(checkbox_questionListFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 780, -1, -1));
        main_panel.add(jSeparator18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 815, 1000, 2));

        combobox_customDelimiter_PostTDList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_customDelimiter_PostTDList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "~", "`", "!", "@", "#", "$", "%", "&", "*", "(", ")", "-", "+", "<", ">", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "=", "_" }));
        combobox_customDelimiter_PostTDList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_customDelimiter_PostTDList.setBorder(null);
        combobox_customDelimiter_PostTDList.setEnabled(false);
        main_panel.add(combobox_customDelimiter_PostTDList, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 650, 168, -1));

        label_customDelimiter_PostTDResponse.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_customDelimiter_PostTDResponse.setForeground(java.awt.Color.white);
        label_customDelimiter_PostTDResponse.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_customDelimiter_PostTDResponse.setText("Custom Delimiter");
        main_panel.add(label_customDelimiter_PostTDResponse, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 650, -1, -1));

        label_fileName_PostTDList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        label_fileName_PostTDList.setForeground(java.awt.Color.white);
        label_fileName_PostTDList.setText("File: Not Chosen");
        main_panel.add(label_fileName_PostTDList, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 615, -1, -1));

        button_chooseFile_PostTDList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        button_chooseFile_PostTDList.setText("Choose File");
        button_chooseFile_PostTDList.setToolTipText("Select the text file containing the responses to analyze.");
        button_chooseFile_PostTDList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_chooseFile_PostTDListActionPerformed(evt);
            }
        });
        main_panel.add(button_chooseFile_PostTDList, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 610, 130, -1));

        combobox_inputType_PostTDList.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        combobox_inputType_PostTDList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Comma Seperated", "Line Seperated", "Custom" }));
        combobox_inputType_PostTDList.setSelectedIndex(1);
        combobox_inputType_PostTDList.setToolTipText("This is the mode for how the software should parse your input.");
        combobox_inputType_PostTDList.setBorder(null);
        combobox_inputType_PostTDList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_inputType_PostTDListActionPerformed(evt);
            }
        });
        main_panel.add(combobox_inputType_PostTDList, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 650, 168, -1));

        label_inputType_PostTDList.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_inputType_PostTDList.setForeground(java.awt.Color.white);
        label_inputType_PostTDList.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_inputType_PostTDList.setText("Post-Talking Drawings");
        main_panel.add(label_inputType_PostTDList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 610, -1, -1));

        label_inputType_PostTDResponses.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        label_inputType_PostTDResponses.setForeground(java.awt.Color.white);
        label_inputType_PostTDResponses.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        label_inputType_PostTDResponses.setText("Input Type");
        main_panel.add(label_inputType_PostTDResponses, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 650, -1, -1));

        getContentPane().add(main_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Button listener for the "Choose File" button for the science word list
     * Handles file dialogue interaction and updates GUI/file paths for science
     * word list
     *
     * @param evt Action event for the button listener
     */
    private void button_chooseFile_scienceWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_chooseFile_scienceWordListActionPerformed

        //Create JFileChooser dialogue
        JFileChooser fc = new JFileChooser();
        if (lastFolder.length() > 0) {
            fc.setCurrentDirectory(new java.io.File(lastFolder));
        }
        fc.setDialogTitle("Select the science word list file");

        //Update file path, file flag, and GUI if user chooses file
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            scienceWordListFilePath = fc.getSelectedFile().toString();
            lastFolder = fc.getSelectedFile().getParent();

            String fileNameToDisplay = scienceWordListFilePath.length() < 35 ? scienceWordListFilePath : scienceWordListFilePath.substring(0, 35) + "...";
            label_fileName_scienceWordList.setText("File: " + fileNameToDisplay);

            updateConsole("Loaded Science Word List File...\nPath: " + scienceWordListFilePath);
            scienceWordListLoaded = true;
        }
    }//GEN-LAST:event_button_chooseFile_scienceWordListActionPerformed

    /**
     * Action listener for when the science word list delimiter is changed
     * Disables the custom word list delimiter JComboBox when the custom
     * delimiter option is not selected to prevent confusion
     *
     * @param evt
     */
    private void combobox_inputType_scienceWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_inputType_scienceWordListActionPerformed

        //Note: Custom delimiter options is index 2
        if (combobox_inputType_scienceWordList.getSelectedIndex() == 2) {
            combobox_customDelimiter_scienceWordList.setEnabled(true);
        } else {
            combobox_customDelimiter_scienceWordList.setEnabled(false);
        }
    }//GEN-LAST:event_combobox_inputType_scienceWordListActionPerformed

    /**
     * Button listener for the "Choose File" button for the question word list
     * Handles file dialogue interaction and updates GUI/file paths for question
     * word list
     *
     * @param evt Action event for the button listener
     */
    private void button_chooseFile_questionWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_chooseFile_questionWordListActionPerformed

        //Create JFileChooser dialogue
        JFileChooser fc = new JFileChooser();
        if (lastFolder.length() > 0) {
            fc.setCurrentDirectory(new java.io.File(lastFolder));
        }
        fc.setDialogTitle("Select the question list file");

        //Update file path, file flag, and GUI if user chooses file
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            questionWordListFilePath = fc.getSelectedFile().toString();
            lastFolder = fc.getSelectedFile().getParent();

            String fileNameToDisplay = questionWordListFilePath.length() < 35 ? questionWordListFilePath : questionWordListFilePath.substring(0, 35) + "...";
            label_fileName_questionWordList.setText("File: " + fileNameToDisplay);

            updateConsole("Loaded Question List file...\nPath: " + questionWordListFilePath);
            questionWordListLoaded = true;
        }
    }//GEN-LAST:event_button_chooseFile_questionWordListActionPerformed

    /**
     * Action listener for when the question list delimiter is changed Disables
     * the custom word list delimiter JComboBox when the custom delimiter option
     * is not selected to prevent confusion
     *
     * @param evt
     */
    private void combobox_inputType_questionWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_inputType_questionWordListActionPerformed
        //Note: Custom delimiter options is index 2
        if (combobox_inputType_questionWordList.getSelectedIndex() == 2) {
            combobox_customDelimiter_questionWordList.setEnabled(true);
        } else {
            combobox_customDelimiter_questionWordList.setEnabled(false);
        }
    }//GEN-LAST:event_combobox_inputType_questionWordListActionPerformed

    /**
     * Button listener for the "Choose File" button for the black word list
     * Handles file dialogue interaction and updates GUI/file paths for black
     * word list
     *
     * @param evt Action event for the button listener
     */
    private void button_chooseFile_blackWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_chooseFile_blackWordListActionPerformed

        //Create JFileChooser dialogue
        JFileChooser fc = new JFileChooser();
        if (lastFolder.length() > 0) {
            fc.setCurrentDirectory(new java.io.File(lastFolder));
        }
        fc.setDialogTitle("Select the black list file");

        //Update file path, file flag, and GUI if user chooses file
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            blackWordListFilePath = fc.getSelectedFile().toString();
            lastFolder = fc.getSelectedFile().getParent();

            String fileNameToDisplay = blackWordListFilePath.length() < 35 ? blackWordListFilePath : blackWordListFilePath.substring(0, 35) + "...";
            label_fileName_blackWordList.setText("File: " + fileNameToDisplay);

            updateConsole("Loaded black list file...\nPath: " + blackWordListFilePath);
            blackWordListLoaded = true;
        }
    }//GEN-LAST:event_button_chooseFile_blackWordListActionPerformed

    /**
     * Action listener for when the black word list delimiter is changed
     * Disables the custom word list delimiter JComboBox when the custom
     * delimiter option is not selected to prevent confusion
     *
     * @param evt
     */
    private void combobox_inputType_blackWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_inputType_blackWordListActionPerformed
        //Note: Custom delimiter options is index 2
        if (combobox_inputType_blackWordList.getSelectedIndex() == 2) {
            combobox_customDelimiter_blackWordList.setEnabled(true);
        } else {
            combobox_customDelimiter_blackWordList.setEnabled(false);
        }

    }//GEN-LAST:event_combobox_inputType_blackWordListActionPerformed

    /**
     * Button listener for the "Choose File" button for the common word list
     * Handles file dialogue interaction and updates GUI/file paths for common
     * word list
     *
     * @param evt Action event for the button listener
     */
    private void button_chooseFile_commonWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_chooseFile_commonWordListActionPerformed

        //Create JFileChooser dialogue
        JFileChooser fc = new JFileChooser();
        if (lastFolder.length() > 0) {
            fc.setCurrentDirectory(new java.io.File(lastFolder));
        }
        fc.setDialogTitle("Select the black list file");

        //Update file path, file flag, and GUI if user chooses file
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            commonWordListFilePath = fc.getSelectedFile().toString();
            lastFolder = fc.getSelectedFile().getParent();

            String fileNameToDisplay = commonWordListFilePath.length() < 35 ? commonWordListFilePath : commonWordListFilePath.substring(0, 35) + "...";
            label_fileName_commonWordList.setText("File: " + fileNameToDisplay);

            updateConsole("Loaded Word List file...\nPath: " + commonWordListFilePath);
            commonWordListLoaded = true;
        }
    }//GEN-LAST:event_button_chooseFile_commonWordListActionPerformed

    /**
     * Action listener for when the black word list delimiter is changed
     * Disables the custom word list delimiter JComboBox when the custom
     * delimiter option is not selected to prevent confusion
     *
     * @param evt
     */
    private void combobox_inputType_commonWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_inputType_commonWordListActionPerformed
        //Note: Custom delimiter options is index 2
        if (combobox_inputType_commonWordList.getSelectedIndex() == 2) {
            combobox_customDelimiter_commonWordList.setEnabled(true);
        } else {
            combobox_customDelimiter_commonWordList.setEnabled(false);
        }
    }//GEN-LAST:event_combobox_inputType_commonWordListActionPerformed

    /**
     * Button listener for the "Choose Output Folder" button Handles file
     * dialogue and updates GUI/file paths when the user selects the folder
     * where the .csv output file should be generated This also enables the
     * Analysis Button and File Name JTextBox, as they are previously disabled
     * to make sure the user chooses an output location
     *
     * @param evt Action event for the button listener
     */
    private void button_chooseOutputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_chooseOutputFolderActionPerformed

        //Create JFileChooser dialogue
        JFileChooser fc = new JFileChooser();
        if (lastFolder.length() > 0) {
            fc.setCurrentDirectory(new java.io.File(lastFolder));
        }
        fc.setDialogTitle("Select the input data folder");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        //Update the output folder file paths and allow the user to analyze the file and change the file name
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            outputFolderPath = fc.getSelectedFile().getAbsolutePath();
            lastFolder = fc.getSelectedFile().getAbsolutePath();

            textbox_outputFile.setEnabled(true);
            button_analyze.setEnabled(true);
        }
    }//GEN-LAST:event_button_chooseOutputFolderActionPerformed

    /**
     * Button listener for the "Preview TD Responses" button This parses through
     * the Pre and Post TD Responses, and it prints the responses to the console
     * This button is used for verification to ensure that it is correctly
     * parsing input responses Both TD response lists do not need to be loaded
     * for this to work
     *
     * @param evt Action event for the button listener
     */
    private void button_previewTDResponsesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_previewTDResponsesActionPerformed

        //Clear current responses and reload them
        preTDResponses.clear();
        loadList(preTDResponses, combobox_inputType_PreTDList.getSelectedIndex(), preTDRFilePath, combobox_customDelimiter_PreTDList.getSelectedItem().toString());

        postTDResponses.clear();
        loadList(postTDResponses, combobox_inputType_PostTDList.getSelectedIndex(), postTDRFilePath, combobox_customDelimiter_PostTDList.getSelectedItem().toString());

        //Print lists of responses to console
        updateConsole("Pre-TD Responses");
        printList(preTDResponses, preTDRLoaded);
        updateConsole("Post-TD Responses");
        printList(postTDResponses, postTDRLoaded);

    }//GEN-LAST:event_button_previewTDResponsesActionPerformed

    /**
     * Button listener for the "Preview Word Lists" button This parses through
     * all the Word Lists, and it prints the responses to the console This
     * button is used for verification to ensure that it is correctly parsing
     * input word lists Not all word lists must be loaded for this to work
     *
     * @param evt Action event for the button listener
     */
    private void button_previewWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_previewWordListActionPerformed

        //Clear word lists
        scienceWordList.clear();
        academicWordList.clear();
        commonWordList.clear();
        questionWordList.clear();
        blackWordList.clear();

        //Load Word Lists
        loadList(scienceWordList, combobox_inputType_scienceWordList.getSelectedIndex(), scienceWordListFilePath, combobox_customDelimiter_scienceWordList.getSelectedItem().toString());
        loadList(academicWordList, combobox_inputType_academicWordList.getSelectedIndex(), academicWordListFilePath, combobox_customDelimiter_academicWordList.getSelectedItem().toString());
        loadList(commonWordList, combobox_inputType_commonWordList.getSelectedIndex(), commonWordListFilePath, combobox_customDelimiter_commonWordList.getSelectedItem().toString());
        loadList(questionWordList, combobox_inputType_questionWordList.getSelectedIndex(), questionWordListFilePath, combobox_customDelimiter_questionWordList.getSelectedItem().toString());
        loadList(blackWordList, combobox_inputType_blackWordList.getSelectedIndex(), blackWordListFilePath, combobox_customDelimiter_blackWordList.getSelectedItem().toString());

        //Update Console
        updateConsole("\nScience Word List:");
        printList(scienceWordList, scienceWordListLoaded);

        updateConsole("\nAcademic Word List:");
        printList(academicWordList, academicWordListLoaded);

        updateConsole("\nCommon Word List:");
        printList(commonWordList, commonWordListLoaded);

        updateConsole("\nBlack Word List:");
        printList(blackWordList, blackWordListLoaded);

        updateConsole("\nQuestion Word List:");
        printList(questionWordList, questionWordListLoaded);

    }//GEN-LAST:event_button_previewWordListActionPerformed

    /**
     * Button listener for the "Analyze" button This performs all of the
     * analysis for the software First, it reads through all the pre-TD prompts
     * and records the frequency of all pieces of language that are not common
     * language, deliberately excluded, or in the question Second, it reads
     * through all the post-TD prompts and records the frequency of all pieces
     * of language that are not common language, deliberately excluded, or in
     * the question Then, it prints out all the scientific language side-by-side
     * with the pre-TD frequency, post-TD frequency, and delta frequency Then,
     * it prints out all the academic language side-by-side with the pre-TD
     * frequency, post-TD frequency, and delta frequency Then, it out total
     * statistics on words used and changed in words used for science language,
     * academic language, and total Finally, it prints out a report on all other
     * words used and their relative frequencies
     *
     * @param evt Action event for the button listener
     */
    private void button_analyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_analyzeActionPerformed

        //Check to make sure all word lists and responses are loaded
        if (preTDRLoaded && postTDRLoaded && scienceWordListLoaded && academicWordListLoaded && blackWordListLoaded && commonWordListLoaded && questionWordListLoaded) {


            //Clear lists
            preTDResponses.clear();
            scienceWordList.clear();
            academicWordList.clear();
            blackWordList.clear();
            questionWordList.clear();
            commonWordList.clear();

            //Load Lists
            loadList(preTDResponses, combobox_inputType_PreTDList.getSelectedIndex(), preTDRFilePath, combobox_customDelimiter_PreTDList.getSelectedItem().toString());
            loadList(postTDResponses, combobox_inputType_PostTDList.getSelectedIndex(), postTDRFilePath, combobox_customDelimiter_PostTDList.getSelectedItem().toString());
            loadList(scienceWordList, combobox_inputType_scienceWordList.getSelectedIndex(), scienceWordListFilePath, combobox_customDelimiter_scienceWordList.getSelectedItem().toString());
            loadList(academicWordList, combobox_inputType_academicWordList.getSelectedIndex(), academicWordListFilePath, combobox_customDelimiter_academicWordList.getSelectedItem().toString());
            loadList(blackWordList, combobox_inputType_blackWordList.getSelectedIndex(), blackWordListFilePath, combobox_customDelimiter_blackWordList.getSelectedItem().toString());
            loadList(questionWordList, combobox_inputType_questionWordList.getSelectedIndex(), questionWordListFilePath, combobox_customDelimiter_questionWordList.getSelectedItem().toString());
            loadList(commonWordList, combobox_inputType_commonWordList.getSelectedIndex(), commonWordListFilePath, combobox_customDelimiter_commonWordList.getSelectedItem().toString());

            //Read in all the pre-TD responses
            int TDIndex = 0;
            for (String response : preTDResponses) {

                //Create response object
                TDResult result = new TDResult(TDIndex++);

                //Split Response into component words
                String[] responseWords = response.split(" ");

                //Iterate through words in each response
                for (String word : responseWords) {

                    //Remove punctuation
                    char[] wordCharacters = word.toCharArray();
                    String wordNoPunctuation = "";
                    for (int charIndex = 0; charIndex < wordCharacters.length; charIndex++)
                        if (wordCharacters[charIndex] == '\'' || Character.isAlphabetic(wordCharacters[charIndex]))
                            wordNoPunctuation += wordCharacters[charIndex];

                    word = wordNoPunctuation;

                    //Cleanup word
                    word = word.toLowerCase().trim();

                    //Skip if it was just punctuation
                    if (word.length() == 0)
                        continue;

                    //Filter if word is common word and filter enabled
                    if (commonWordList.contains(word) && checkbox_commonWordFilter.isSelected())
                        continue;

                    //Filter if blacklisted and filter enabled
                    if (blackWordList.contains(word) && checkbox_blackListFilter.isSelected())
                        continue;

                    //Filter if in question and filter enabled
                    if (questionWordList.contains(word) && checkbox_questionListFilter.isSelected())
                        continue;

                    //Add to list
                    result.updateWord(word);

                }

                //Save result
                preTDResults.add(result);
            }

            //Read in all the post-TD responses
            TDIndex = 0;
            for (String response : postTDResponses) {

                //Create response
                TDResult result = new TDResult(TDIndex++);

                //Split Response
                String[] responseWords = response.split(" ");

                //Iterate through words in each response
                for (String word : responseWords) {

                    //Remove punctuation
                    char[] wordCharacters = word.toCharArray();
                    String wordNoPunctuation = "";
                    for (int charIndex = 0; charIndex < wordCharacters.length; charIndex++)
                        if (wordCharacters[charIndex] == '\'' || Character.isAlphabetic(wordCharacters[charIndex]))
                            wordNoPunctuation += wordCharacters[charIndex];

                    word = wordNoPunctuation;

                    //Cleanup word
                    word = word.toLowerCase().trim();

                    //Skip if it was just punctuation
                    if (word.length() == 0)
                        continue;

                    //Filter if word is common word and filter enabled
                    if (commonWordList.contains(word) && checkbox_commonWordFilter.isSelected())
                        continue;

                    //Filter if blacklisted and filter enabled
                    if (blackWordList.contains(word) && checkbox_blackListFilter.isSelected())
                        continue;

                    //Filter if in question and filter enabled
                    if (questionWordList.contains(word) && checkbox_questionListFilter.isSelected())
                        continue;

                    //Add to list
                    result.updateWord(word);

                }

                //Save result
                postTDResults.add(result);
            }

            //Declare Frequency Lists
            int[] frequency_preScienceWordList = new int[scienceWordList.size()];
            int[] frequency_preAcademicWordList = new int[academicWordList.size()];
            Map<String, Integer> frequency_preAllWords = new HashMap();

            int[] frequency_postScienceWordList = new int[scienceWordList.size()];
            int[] frequency_postAcademicWordList = new int[academicWordList.size()];
            Map<String, Integer> frequency_postAllWords = new HashMap();

            //Initialize Frequency Lists
            for (int index = 0; index < frequency_preScienceWordList.length; index++)
                frequency_preScienceWordList[index] = 0;
            for (int index = 0; index < frequency_preAcademicWordList.length; index++)
                frequency_preAcademicWordList[index] = 0;
            for (int index = 0; index < frequency_postScienceWordList.length; index++)
                frequency_postScienceWordList[index] = 0;
            for (int index = 0; index < frequency_postAcademicWordList.length; index++)
                frequency_postAcademicWordList[index] = 0;


            //Collect academic, science, and other frequency lists from the parsed pre-TD
            for (TDResult result : preTDResults) {

                //Load science language
                for (int scienceWordIndex = 0; scienceWordIndex < scienceWordList.size(); scienceWordIndex++)
                    if (result.getFrequencyMap().containsKey(scienceWordList.get(scienceWordIndex)))
                        frequency_preScienceWordList[scienceWordIndex] += result.getFrequencyMap().get(scienceWordList.get(scienceWordIndex));

                //Load academic language
                for (int academicWordIndex = 0; academicWordIndex < academicWordList.size(); academicWordIndex++)
                    if (result.getFrequencyMap().containsKey(academicWordList.get(academicWordIndex)))
                        frequency_preAcademicWordList[academicWordIndex] += result.getFrequencyMap().get(academicWordList.get(academicWordIndex));


                //Load all other pieces of language
                for (Map.Entry<String, Integer> entry : result.getFrequencyMap().entrySet())
                    if (frequency_preAllWords.containsKey(entry.getKey()))
                        frequency_preAllWords.put(entry.getKey(), frequency_preAllWords.get(entry.getKey()) + 1);
                    else
                        frequency_preAllWords.put(entry.getKey(), 1);
            }

            //Collect academic, science, and other frequency lists from the parsed post-TD
            for (TDResult result : postTDResults) {

                //Load science language
                for (int scienceWordIndex = 0; scienceWordIndex < scienceWordList.size(); scienceWordIndex++)
                    if (result.getFrequencyMap().containsKey(scienceWordList.get(scienceWordIndex)))
                        frequency_postScienceWordList[scienceWordIndex] += result.getFrequencyMap().get(scienceWordList.get(scienceWordIndex));

                //Load academic language
                for (int academicWordIndex = 0; academicWordIndex < academicWordList.size(); academicWordIndex++)
                    if (result.getFrequencyMap().containsKey(academicWordList.get(academicWordIndex)))
                        frequency_postAcademicWordList[academicWordIndex] += result.getFrequencyMap().get(academicWordList.get(academicWordIndex));


                //Load all other pieces of language
                for (Map.Entry<String, Integer> entry : result.getFrequencyMap().entrySet())
                    if (frequency_postAllWords.containsKey(entry.getKey()))
                        frequency_postAllWords.put(entry.getKey(), frequency_postAllWords.get(entry.getKey()) + 1);
                    else
                        frequency_postAllWords.put(entry.getKey(), 1);
            }
                
            try {
                
                //Concatenate file path
                String filePath = outputFolderPath + "\\" + textbox_outputFile.getText() + ".csv";
                
                //Create file/buffered writers
                FileWriter fileWriter = new FileWriter(filePath);              
                BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                
                //Write header key 
                bufferedWriter.write("Word,Pre-TD Word Frequency, Post-TD Word Frequency, Delta Word Frequency\n\n");
                    
                //Write science language header
                bufferedWriter.write("\nScience Language\n");
                          
                //Science language counters
                int scienceWordCounterPre = 0;
                int scienceWordCounterPost = 0;
                
                //Write science language to file
                for (int scienceWord = 0; scienceWord < scienceWordList.size(); scienceWord++) {
                    scienceWordCounterPre += frequency_preScienceWordList[scienceWord];
                    scienceWordCounterPost += frequency_postScienceWordList[scienceWord];
                        
                    bufferedWriter.write(scienceWordList.get(scienceWord) + "," + frequency_preScienceWordList[scienceWord] + "," + frequency_postScienceWordList[scienceWord] + "," + (frequency_postScienceWordList[scienceWord] - frequency_preScienceWordList[scienceWord]) + "\n");                 
                }
                
                //Write academic language header
                bufferedWriter.write("\n\nAcademic Language\n");
                             
                //Academic language counters
                int academicWordCounterPre = 0;
                int academicWordCounterPost = 0;
 
                //Write academic language to file
                for (int academicWord = 0; academicWord < academicWordList.size(); academicWord++) {
                    academicWordCounterPre += frequency_preAcademicWordList[academicWord];
                    academicWordCounterPost += frequency_postAcademicWordList[academicWord];

                    bufferedWriter.write(academicWordList.get(academicWord) + "," + frequency_preAcademicWordList[academicWord] + "," + frequency_postAcademicWordList[academicWord] + "," + (frequency_postAcademicWordList[academicWord] - frequency_preAcademicWordList[academicWord]) + "\n");                
                }
                
                //Write total academic results
                bufferedWriter.write("\n\nTotal Academic Language Pre-TD (words): " + academicWordCounterPre + "\n");
                bufferedWriter.write("Total Academic Language Post-TD (words): " + academicWordCounterPost + "\n");
                bufferedWriter.write("Change in Academic Language (words): " + (academicWordCounterPost - academicWordCounterPre) + "\n");

                double percentChange = 100 * (double) (academicWordCounterPost - academicWordCounterPre) / academicWordCounterPre;
                percentChange *= 100;
                percentChange = Math.floor(percentChange);
                percentChange /= 100;

                bufferedWriter.write("Change in Academic Language (%): " + percentChange + "%\n");
               
                //Write total science results
                bufferedWriter.write("\n\nTotal Science Language Pre-TD (words): " + scienceWordCounterPre + "\n");
                bufferedWriter.write("Total Science Language Post-TD (words): " + scienceWordCounterPost + "\n");
                bufferedWriter.write("Change in Science Language (words): " + (scienceWordCounterPost - scienceWordCounterPre) + "\n");

                percentChange = 100 * (double) (scienceWordCounterPost - scienceWordCounterPre) / scienceWordCounterPre;
                percentChange *= 100;
                percentChange = Math.floor(percentChange);
                percentChange /= 100;
                bufferedWriter.write("Change in Science Language (%): " + percentChange + "%\n");
           
                //Write total results
                bufferedWriter.write("\n\nTotal Language Pre-TD (words): " + (academicWordCounterPre + scienceWordCounterPre) + "\n");
                bufferedWriter.write("Total Language Post-TD (words): " + (academicWordCounterPost + scienceWordCounterPost) + "\n");
                bufferedWriter.write("Change in Total Language (words): " + ((academicWordCounterPost + scienceWordCounterPost) - (academicWordCounterPre + scienceWordCounterPre)) + "\n");

                percentChange = 100 * (double) (((academicWordCounterPost + scienceWordCounterPost) - (academicWordCounterPre + scienceWordCounterPre))) / (academicWordCounterPre + scienceWordCounterPre);
                percentChange *= 100;
                percentChange = Math.floor(percentChange);
                percentChange /= 100;
                bufferedWriter.write("Change in Total Language (%): " + percentChange + "%\n\n\n");
                              
                //Write report key
                bufferedWriter.write("\n\nWord Type,Word,Word Frequency\n\n");
            
                //Write pre-TD header
                bufferedWriter.write("\nPre-TD All Words Used\n");
               
                //Write pre-TD words
                for (Map.Entry<String, Integer> entry : frequency_preAllWords.entrySet()) 
                    bufferedWriter.write("All Language," + entry.getKey() + "," + entry.getValue() + "\n");
                
                //Write post-TD header
                bufferedWriter.write("\nPost-TD All Words Used\n");
                             
                //Write post-TD words
                for (Map.Entry<String, Integer> entry : frequency_postAllWords.entrySet()) 
                    bufferedWriter.write("All Language," + entry.getKey() + "," + entry.getValue() + "\n");
                                
                //Close Readers
                if (bufferedWriter != null) 
                    bufferedWriter.close();
                                
                if (fileWriter != null) 
                    fileWriter.close();
                            
                //Reset Word List & Response list
                preTDResponses.clear();
                preTDResults.clear();
                scienceWordList.clear();
                academicWordList.clear();
                commonWordList.clear();
                blackWordList.clear();
                questionWordList.clear();
                
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_button_analyzeActionPerformed

    /**
     * Button listener for the "Clear Files" button 
     * This resets all file paths, file flags, labels, and buttons
     * @param evt Action event for the button listener
     */
    private void button_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_resetActionPerformed

        //Reset Labels
        label_fileName_academicWordList.setText("File: Not Chosen");
        label_fileName_scienceWordList.setText("File: Not Chosen");
        label_fileName_commonWordList.setText("File: Not Chosen");
        label_fileName_blackWordList.setText("File: Not Chosen");
        label_fileName_questionWordList.setText("File: Not Chosen");
        label_fileName_PreTDList.setText("File: Not Chosen");
        label_fileName_PostTDList.setText("File: Not Chosen");

        //Reset Globals
        scienceWordListLoaded = false;
        academicWordListLoaded = false;
        commonWordListLoaded = false;
        blackWordListLoaded = false;
        questionWordListLoaded = false;
        preTDRLoaded = false;
        postTDRLoaded = false;

        //Clear console
        textarea_console.setText("");

        //Reset Dialog
        preTDRFilePath = "";
        postTDRFilePath = "";
        academicWordListFilePath = "";
        scienceWordListFilePath = "";
        blackWordListFilePath = "";
        commonWordListFilePath = "";
        questionWordListFilePath = "";

        //Reset Word List & Response list
        preTDResponses.clear();
        preTDResults.clear();
        postTDResponses.clear();
        postTDResults.clear();
        scienceWordList.clear();
        academicWordList.clear();
        commonWordList.clear();
        blackWordList.clear();
        questionWordList.clear();

        //Reset buttons
        outputFolderPath = "";
        textbox_outputFile.setEnabled(false);
        button_analyze.setEnabled(false);
    }//GEN-LAST:event_button_resetActionPerformed

     /**
     * Button listener for the "Choose File" button for the pre-TD responses
     * Handles file dialogue interaction and updates GUI/file paths for common
     * pre-TD list
     *
     * @param evt Action event for the button listener
     */
    private void button_chooseFile_PreTDListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_chooseFile_PreTDListActionPerformed
        //Create JFileChooser dialogue
        JFileChooser fc = new JFileChooser();
        if (lastFolder.length() > 0) {
            fc.setCurrentDirectory(new java.io.File(lastFolder));
        }
        fc.setDialogTitle("Select the file with the pre-TD responses");

        //Update the output folder file paths and allow the user to analyze the file and change the file name
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            preTDRFilePath = fc.getSelectedFile().toString();
            lastFolder = fc.getSelectedFile().getParent();

            String fileNameToDisplay = preTDRFilePath.length() < 35 ? preTDRFilePath : preTDRFilePath.substring(0, 35) + "...";
            label_fileName_PreTDList.setText("File: " + fileNameToDisplay);

            preTDRLoaded = true;
            updateConsole("Loaded pre-TDR file...\nPath: " + preTDRFilePath);
        }
    }//GEN-LAST:event_button_chooseFile_PreTDListActionPerformed

    /**
     * Action listener for when the pre-TD list delimiter is changed
     * Disables the custom word list delimiter JComboBox when the custom
     * delimiter option is not selected to prevent confusion
     *
     * @param evt
     */
    private void combobox_inputType_PreTDListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_inputType_PreTDListActionPerformed
        //Note: Custom delimiter options is index 2
        if (combobox_inputType_PreTDList.getSelectedIndex() == 2) 
            combobox_customDelimiter_PreTDList.setEnabled(true);
        else 
            combobox_customDelimiter_PreTDList.setEnabled(false);
        
    }//GEN-LAST:event_combobox_inputType_PreTDListActionPerformed

     /**
     * Button listener for the "Choose File" button for the academic word list
     * Handles file dialogue interaction and updates GUI/file paths for common
     * pre-TD list
     *
     * @param evt Action event for the button listener
     */
    private void button_chooseFile_academicWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_chooseFile_academicWordListActionPerformed

        //Create JFileChooser dialogue
        JFileChooser fc = new JFileChooser();
        if (lastFolder.length() > 0) {
            fc.setCurrentDirectory(new java.io.File(lastFolder));
        }
        fc.setDialogTitle("Select the academic word list file");

        //Update the output folder file paths and allow the user to analyze the file and change the file name
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            academicWordListFilePath = fc.getSelectedFile().toString();
            lastFolder = fc.getSelectedFile().getParent();

            String fileNameToDisplay = academicWordListFilePath.length() < 35 ? academicWordListFilePath : academicWordListFilePath.substring(0, 35) + "...";
            label_fileName_academicWordList.setText("File: " + fileNameToDisplay);

            updateConsole("Loaded the academic word list file...\nPath: " + academicWordListFilePath);
            academicWordListLoaded = true;
        }
    }//GEN-LAST:event_button_chooseFile_academicWordListActionPerformed

     /**
     * Action listener for when the academic word list delimiter is changed
     * Disables the custom word list delimiter JComboBox when the custom
     * delimiter option is not selected to prevent confusion
     *
     * @param evt
     */
    private void combobox_inputType_academicWordListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_inputType_academicWordListActionPerformed
        //Note: Custom delimiter options is index 2
        if (combobox_inputType_academicWordList.getSelectedIndex() == 2) 
            combobox_customDelimiter_academicWordList.setEnabled(true);
        else 
            combobox_customDelimiter_academicWordList.setEnabled(false);      
    }//GEN-LAST:event_combobox_inputType_academicWordListActionPerformed

     /**
     * Button listener for the "Choose File" button for the post-TD responses
     * Handles file dialogue interaction and updates GUI/file paths for common
     * pre-TD list
     *
     * @param evt Action event for the button listener
     */
    private void button_chooseFile_PostTDListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_chooseFile_PostTDListActionPerformed
       
        //Create JFileChooser dialogue
        JFileChooser fc = new JFileChooser();
        if (lastFolder.length() > 0) {
            fc.setCurrentDirectory(new java.io.File(lastFolder));
        }
        fc.setDialogTitle("Select the file with the post-talking drawing responses");

        //Update the output folder file paths and allow the user to analyze the file and change the file name
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            postTDRFilePath = fc.getSelectedFile().toString();
            lastFolder = fc.getSelectedFile().getParent();

            String fileNameToDisplay = postTDRFilePath.length() < 35 ? postTDRFilePath : postTDRFilePath.substring(0, 35) + "...";
            label_fileName_PostTDList.setText("File: " + fileNameToDisplay);

            postTDRLoaded = true;
            updateConsole("Loaded Post-TDR file...\nPath: " + postTDRFilePath);
        }
    }//GEN-LAST:event_button_chooseFile_PostTDListActionPerformed

    /**
     * Action listener for when the post-TD list delimiter is changed
     * Disables the custom word list delimiter JComboBox when the custom
     * delimiter option is not selected to prevent confusion
     *
     * @param evt
     */
    private void combobox_inputType_PostTDListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_inputType_PostTDListActionPerformed
               //Note: Custom delimiter options is index 2
        if (combobox_inputType_PostTDList.getSelectedIndex() == 2) 
            combobox_customDelimiter_PostTDList.setEnabled(true);
        else 
            combobox_customDelimiter_PostTDList.setEnabled(false);
        
    }//GEN-LAST:event_combobox_inputType_PostTDListActionPerformed

    /**
     * loadList takes a file path to a word list and loads the words into an
     * ArrayList<String> using a custom delimiter
     *
     * @param list ArrayList<String> where the word list is to be stored
     * @param inputType Selection index on the JComboBox for the delimiter type
     * @param filePath Path to the word list to load in
     * @param customDelimiter Delimiter used to separate words
     */
    private void loadList(ArrayList<String> list, int inputType, String filePath, String customDelimiter) {

        //Declare Readers
        BufferedReader bufferedReader = null;
        FileReader fileReader = null;

        //Initialize Delimiters
        String delimiter = "";
        boolean lineDelimiter = false;

        //Set Delimiter
        switch (inputType) {
            case 0:
                delimiter = ",";
                break;
            case 1:
                lineDelimiter = true;
                break;
            default:
                delimiter = customDelimiter;
                break;
        }

        //Read file
        try {

            //Instantiate readers
            fileReader = new FileReader(filePath);
            bufferedReader = new BufferedReader(fileReader);

            //Input Line
            String line = "";
            String cumulativeText = "";

            //Read Line by Line
            while ((line = bufferedReader.readLine()) != null) {

                //Save Line
                cumulativeText += line;

                //Parse Line
                if (lineDelimiter) {
                    list.add(line.trim().toLowerCase());
                    cumulativeText = "";
                } else if (cumulativeText.contains(delimiter)) {

                    //Words
                    String[] words = cumulativeText.split(delimiter);

                    //Add words
                    for (int wordIndex = 0; wordIndex < words.length; wordIndex++) {
                        if (words[wordIndex].trim().length() > 0) {
                            list.add(words[wordIndex].trim().toLowerCase());
                        }
                    }

                    //Trim text
                    cumulativeText = cumulativeText.substring(cumulativeText.lastIndexOf(delimiter) + 1);
                }
            }

            //Add final word & check repeat
            if (list.size() > 0 && !cumulativeText.trim().equalsIgnoreCase(list.get(list.size() - 1)) && cumulativeText.trim().length() > 0) {
                list.add(cumulativeText.trim().toLowerCase());
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Cannot read in list! ", "Error: Cannot Read File!", JOptionPane.ERROR_MESSAGE);
        } finally {

            //Close File Readers
            try {
                if (bufferedReader != null) {
                    bufferedReader.close();
                }

                if (fileReader != null) {
                    fileReader.close();
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Cannot close file writer! ", "Error: Cannot Close File Writer!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * printList prints out all words in a word/response list if it is loaded
     * @param list ArrayList<String> of words to print
     */
    private void printList(ArrayList<String> list, boolean listLoaded) {

        //Check to make sure the science word list file is loaded
        if (listLoaded) {

            //Print word list
            int counter = 1;
            for (String word : list) {
                updateConsole("Word " + counter++ + ": " + word);
            }
        } else {
            updateConsole("Error: Cannot preview word list. File is not loaded.");
        }
    }

    /**
     * This pushes text to the JTextAreaConsole
     * @param text This is the message to be pushed to the console
     */
    private void updateConsole(String text) {
        textarea_console.setText(textarea_console.getText() + text + "\n");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_analyze;
    private javax.swing.JButton button_chooseFile_PostTDList;
    private javax.swing.JButton button_chooseFile_PreTDList;
    private javax.swing.JButton button_chooseFile_academicWordList;
    private javax.swing.JButton button_chooseFile_blackWordList;
    private javax.swing.JButton button_chooseFile_commonWordList;
    private javax.swing.JButton button_chooseFile_questionWordList;
    private javax.swing.JButton button_chooseFile_scienceWordList;
    private javax.swing.JButton button_chooseOutputFolder;
    private javax.swing.JButton button_previewTDResponses;
    private javax.swing.JButton button_previewWordList;
    private javax.swing.JButton button_reset;
    private javax.swing.JCheckBox checkbox_blackListFilter;
    private javax.swing.JCheckBox checkbox_commonWordFilter;
    private javax.swing.JCheckBox checkbox_questionListFilter;
    private javax.swing.JComboBox<String> combobox_customDelimiter_PostTDList;
    private javax.swing.JComboBox<String> combobox_customDelimiter_PreTDList;
    private javax.swing.JComboBox<String> combobox_customDelimiter_academicWordList;
    private javax.swing.JComboBox<String> combobox_customDelimiter_blackWordList;
    private javax.swing.JComboBox<String> combobox_customDelimiter_commonWordList;
    private javax.swing.JComboBox<String> combobox_customDelimiter_questionWordList;
    private javax.swing.JComboBox<String> combobox_customDelimiter_scienceWordList;
    private javax.swing.JComboBox<String> combobox_inputType_PostTDList;
    private javax.swing.JComboBox<String> combobox_inputType_PreTDList;
    private javax.swing.JComboBox<String> combobox_inputType_academicWordList;
    private javax.swing.JComboBox<String> combobox_inputType_blackWordList;
    private javax.swing.JComboBox<String> combobox_inputType_commonWordList;
    private javax.swing.JComboBox<String> combobox_inputType_questionWordList;
    private javax.swing.JComboBox<String> combobox_inputType_scienceWordList;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator15;
    private javax.swing.JSeparator jSeparator16;
    private javax.swing.JSeparator jSeparator17;
    private javax.swing.JSeparator jSeparator18;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JLabel label_academicWordList;
    private javax.swing.JLabel label_blackWordList;
    private javax.swing.JLabel label_commonWordList;
    private javax.swing.JLabel label_console;
    private javax.swing.JLabel label_customDelimiter_PostTDResponse;
    private javax.swing.JLabel label_customDelimiter_PreTDResponse;
    private javax.swing.JLabel label_customDelimiter_academicWordList;
    private javax.swing.JLabel label_customDelimiter_blackWordList;
    private javax.swing.JLabel label_customDelimiter_commonWordList;
    private javax.swing.JLabel label_customDelimiter_questionWordList;
    private javax.swing.JLabel label_customDelimiter_scienceWordList;
    private javax.swing.JLabel label_fileName_PostTDList;
    private javax.swing.JLabel label_fileName_PreTDList;
    private javax.swing.JLabel label_fileName_academicWordList;
    private javax.swing.JLabel label_fileName_blackWordList;
    private javax.swing.JLabel label_fileName_commonWordList;
    private javax.swing.JLabel label_fileName_questionWordList;
    private javax.swing.JLabel label_fileName_scienceWordList;
    private javax.swing.JLabel label_inputType_PostTDList;
    private javax.swing.JLabel label_inputType_PostTDResponses;
    private javax.swing.JLabel label_inputType_PreTDList;
    private javax.swing.JLabel label_inputType_PreTDResponses;
    private javax.swing.JLabel label_inputType_academicWordList;
    private javax.swing.JLabel label_inputType_blackWordList;
    private javax.swing.JLabel label_inputType_commonWordList;
    private javax.swing.JLabel label_inputType_questionWordList;
    private javax.swing.JLabel label_inputType_scienceWordList;
    private javax.swing.JLabel label_outputFileName;
    private javax.swing.JLabel label_scienceWordList;
    private javax.swing.JLabel label_title1;
    private javax.swing.JLabel label_wordList_questionWordList;
    private javax.swing.JPanel main_panel;
    private javax.swing.JTextArea textarea_console;
    private javax.swing.JTextField textbox_outputFile;
    // End of variables declaration//GEN-END:variables
}
